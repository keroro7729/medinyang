import React, { useState, useEffect, useRef } from "react";
import UserDropdownMenu from "./UserDropdown.jsx"; // üü¶ ÎìúÎ°≠Îã§Ïö¥ Ïª¥Ìè¨ÎÑåÌä∏

const UserSwitcher = () => {
  const [currentUser, setCurrentUser] = useState(null);
  const [users, setUsers] = useState([]);
  const [isOpen, setIsOpen] = useState(false);
  const wrapperRef = useRef(null);

  // ‚úÖ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î∂àÎü¨Ïò§Í∏∞
  useEffect(() => {
    const storedUsers = JSON.parse(localStorage.getItem("users") || "[]");
    const storedCurrent = JSON.parse(localStorage.getItem("currentUser"));

    // Î°úÍ∑∏Ïù∏ Ïú†Ï†ÄÍ∞Ä usersÏóê ÏóÜÏúºÎ©¥ Ï∂îÍ∞Ä
    if (storedCurrent && !storedUsers.find((u) => u.id === storedCurrent.id)) {
      storedUsers.push(storedCurrent);
      localStorage.setItem("users", JSON.stringify(storedUsers));
    }

    setUsers(storedUsers);
    setCurrentUser(storedCurrent);
  }, []);

  // ‚úÖ ÎìúÎ°≠Îã§Ïö¥ Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  // ‚úÖ Ïú†Ï†Ä ÏÑ†ÌÉù Ïãú ÏÑúÎ≤ÑÏóê ÏÑ∏ÏÖò Ï†ÑÌôò ÏöîÏ≤≠
  const handleSelectUser = async (user) => {
    console.log("ÏÑ†ÌÉùÎêú Ïú†Ï†Ä:", user);         // ‚úÖ Ï†ÑÏ≤¥ Ïú†Ï†Ä Í∞ùÏ≤¥ ÌôïÏù∏
  console.log("Ïú†Ï†Ä ID:", user.id);         // ‚úÖ Ïã§Ï†úÎ°ú Î∞±ÏóîÎìúÎ°ú Î≥¥ÎÇ¥Îäî ID ÌôïÏù∏
    try {
      const res = await fetch(
        `${import.meta.env.VITE_API_BASE_URL}/users/switch/${user.id}`,
        {
          method: "POST",
          credentials: "include", // ‚úÖ ÏÑ∏ÏÖò Ïø†ÌÇ§ Ìè¨Ìï®
        }
      );

      if (!res.ok) throw new Error("ÏÑ∏ÏÖò Ï†ÑÌôò Ïã§Ìå®");

      // ‚úÖ ÏÑ∏ÏÖò Ï†ÑÌôò ÏÑ±Í≥µ ‚Üí currentUser Í∞±Ïã†
      localStorage.setItem("currentUser", JSON.stringify(user));
      setCurrentUser(user);
      setIsOpen(false);
      window.location.reload();
    } catch (err) {
      console.error("Ïú†Ï†Ä Ï†ÑÌôò Ïã§Ìå®", err);
      alert("Ïú†Ï†Ä Ï†ÑÌôòÏóê Ïã§Ìå®ÌñàÏñ¥Ïöî. Îã§Ïãú Î°úÍ∑∏Ïù∏ Ìï¥Ï£ºÏÑ∏Ïöî.");
      window.location.href = "/";
    }
  };

  // ‚úÖ Ïú†Ï†Ä Ï∂îÍ∞Ä ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
  const handleAddUser = () => {
    setIsOpen(false);
    window.location.href = "/add-user";
  };

  // ‚úÖ Ïú†Ï†Ä ÏÇ≠Ï†ú
  const handleDeleteUser = (userToDelete) => {
    const confirmDelete = window.confirm("Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?");
    if (!confirmDelete) return;

    const updatedUsers = users.filter((u) => u.id !== userToDelete.id);
    localStorage.setItem("users", JSON.stringify(updatedUsers));
    setUsers(updatedUsers);

    if (userToDelete.id === currentUser?.id) {
      localStorage.removeItem("currentUser");
      setCurrentUser(null);
      window.location.reload();
    }
  };

  return (
    <div ref={wrapperRef} style={styles.wrapper}>
      <div onClick={() => setIsOpen(!isOpen)} style={styles.button}>
        ‚ñº {currentUser?.name || "Îì±Î°ùÎêú Ïú†Ï†Ä ÏóÜÏùå"}
      </div>
      {isOpen && (
        <UserDropdownMenu
          users={users}
          onSelectUser={handleSelectUser}
          onAddUser={handleAddUser}
          onDeleteUser={handleDeleteUser}
        />
      )}
    </div>
  );
};

const styles = {
  wrapper: {
    position: "relative",
    padding: "10px 20px",
    zIndex: 1000,
  },
  button: {
    fontWeight: "bold",
    backgroundColor: "white",
    border: "1px solid #ccc",
    borderRadius: "8px",
    padding: "6px 12px",
    cursor: "pointer",
    width: "fit-content",
    boxShadow: "0 2px 4px rgba(0,0,0,0.1)",
  },
};

export default UserSwitcher;
